<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 修的个人网站</title>
    <link>http://zhixiukang.com/posts/</link>
    <description>Recent content in Posts on 修的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 03 Mar 2020 15:21:33 -0800</lastBuildDate>
    
	<atom:link href="http://zhixiukang.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>面试中的JS运算符</title>
      <link>http://zhixiukang.com/posts/js-operators/</link>
      <pubDate>Tue, 03 Mar 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/js-operators/</guid>
      <description>算数运算符  ＋－* / 余数%  //JS的错误 -1%7 //-1 而不是 6  指数 x**3 自增自减  x++ //这个表达式的值为x，最后返回x+1 ++x //这个表达式的值为x+1，最后返回x+1 x-- //这个表达式的值为x，最后返回x-1 --x //这个表达式的值为x-1，最后返回x-1  尽量少用自增自减
  求值运算符  // 可以将任何值转为数值（与Number函数的作用相同） +(-1)// -1 +true // 1 +[] // 0 +{} // NaN  负数运算符  // 同样具有将一个值转为数值的功能，只不过得到的值正负相反 -(-1) // 1 -true // -1 -[] // -0 -{} // NaN  JS的一个糟粕  1 + &amp;#39;2&amp;#39; //&amp;#34;12&amp;#34; 2 - &amp;#39;1&amp;#39; // 1 // +号运算符默认把所有运算子变成字符串然后运算 // -号运算符默认把所有运算子变成数值然后运算 比较运算符  JS三位一体  意思是:</description>
    </item>
    
    <item>
      <title>JS函数和你不知道的this</title>
      <link>http://zhixiukang.com/posts/js-funtion-and-this/</link>
      <pubDate>Sun, 01 Mar 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/js-funtion-and-this/</guid>
      <description>四种方式定义函数 具名函数 function 函数名(形式参数1, 形式参数2) { 语句 return 返回值 } 匿名函数  上面的具名函数，去掉函数名就是匿名函数 let a = function(x, y) {return x+y} 也叫函数表达式  箭头函数 let f1 = x =&amp;gt; x*x let f2 = (x, y) =&amp;gt; x+y // 圆括号不能省 let f3 = (x, y) =&amp;gt; {return x+y} //花括号不能省 let f4 = (x, y) =&amp;gt; ({name:x, age: y})  直接返回对象会出错，需要加个圆括号
 构造函数  let f = new Function(‘x’, ‘y’, ‘return x+y’) 所有函数都是Function构造出来的 包括Object、Array、Function也是   基本没人用，但是能让你知道函数是谁构造的</description>
    </item>
    
    <item>
      <title>JS数组的增删改查和数组变换</title>
      <link>http://zhixiukang.com/posts/js-array/</link>
      <pubDate>Thu, 27 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/js-array/</guid>
      <description>JS 的数组不是典型数组 典型的数组  元素的数据类型相同 使用连续的内存存储 通过数字下标获取元素  但 JS 的数组不这样  元素的数据类型可以不同 内存不一定是连续的(对象是随机存储的) 不能通过数字下标，而是通过字符串下标 这意味着数组可以有任何 key  let arr = [1, 2, 3] arr[‘xxx&amp;#39;] = 1 创建一个数组 新建 let arr = [1, 2, 3]; let arr = new Array(1, 2, 3); let arr = new Array(3); 转化 let arr = &amp;#39;1, 2, 3&amp;#39;.split(‘,’) let arr = &amp;#39;123&amp;#39;.split(‘’) Array.from(&amp;#39;123&amp;#39;) 伪数组 let divList = document.querySelector(‘div’) let divArray = Array.from(divList)  伪数组的原型链中并没有数组的原型。</description>
    </item>
    
    <item>
      <title>JS对象分类、原型和共用属性的关系、对象的ES6写法</title>
      <link>http://zhixiukang.com/posts/js-object-and-prototype-with-public-attributes/</link>
      <pubDate>Tue, 25 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/js-object-and-prototype-with-public-attributes/</guid>
      <description>延伸阅读
你可以不会 class，但是一定要学会 prototype
JS 的 new 到底是干什么的？
JS 中 proto 和 prototype 存在的意义是什么？
ES6 所有新特性
 构造函数 函数和原型结合 function createSquare(width) { let obj = Object.create(createSquare.squarePrototype) obj.width = width return obj } createSquare.squarePrototype = { getArea() { return this.width * this.width	}, getLength() { return this.width * 4 }, constructor: createSquare } let square = createSquare(5) 简化为：
function Square(width) { this.width = width } Square.prototype.getArea = function() { return this.</description>
    </item>
    
    <item>
      <title>JS对象的增删改查</title>
      <link>http://zhixiukang.com/posts/create-retrieve-update-delete-of-js-object/</link>
      <pubDate>Sun, 23 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/create-retrieve-update-delete-of-js-object/</guid>
      <description>七种数据类型？
number string bool symbol
null undefined
object
  五个 falsy 值？
null undefined
0 NaN
‘’
 对象的语法 定义  无序的数据集合 键值对的集合  写法 let obj = {&amp;#39;name&amp;#39;: &amp;#39;frank’, ‘age’: 18} let obj = new Object({‘name’: ‘frank’}) console.log({&amp;#39;name&amp;#39;: ‘frank’, ‘age’: 18}) 细节  键名是字符串，不是标识符，可以包含任意字符 引号可省略，省略之后就只能写标识符 就算引号省略了，键名也还是字符串  Object.keys(object)可以得到 object 的所有 key
   变量作属性名 如何用变量做属性名 let p1 = &amp;#39;name&amp;#39; // 这样写，属性名为&amp;#39;p1&amp;#39; let obj = {p1: &amp;#39;frank’} // 这样写，属性名为&amp;#39;name&amp;#39; let obj = {[p1]: &amp;#39;frank’} 对比  不加[]的属性名会自动变成字符串 加了[]的则会被当做变量求值 值如果不是字符串，则会自动变成字符串  对象的隐藏属性  JS 中每一个对象都有一个隐藏属性 这个隐藏属性存储着其共有属性组成的对象的地址 这个公有属性组成的对象叫做原型 也就是说，隐藏属性储存着原型的地址  var obj = {}; obj.</description>
    </item>
    
    <item>
      <title>字符编码、JS数据类型、变量声明、类型转换</title>
      <link>http://zhixiukang.com/posts/encoding-js-data-type-variable-declaration-typecasting/</link>
      <pubDate>Thu, 20 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/encoding-js-data-type-variable-declaration-typecasting/</guid>
      <description>推荐阅读: 我用了两个月的时间才理解 let - 知乎
  字符编码笔记：ASCII，Unicode 和 UTF-8 - 阮一峰的网络日志
 JS 中的数据类型 7 种  数字 number 字符串 string 布尔 bool 符号 symbol 空 undefined 空 null 对象 object  总结: 四基两空一对象
   以下不是数据类型  数组、函数、日期 它们都属于 object  数字 number(64 位浮点数) 写法  整数写法: 1 小数写法: 0.1 科学计数法: 1.23e4 八进制写法: 0123 或 00123 或 0o123 十六进制写法: 0x3F 或 0X3F 二进制写法: 0b11 或 0B11  特殊值  正 0 和负 0: 都等于 0，要严谨 无穷大: Infinity、+Infinity、-Infinity 无法表示的数字: NaN(Not a Number), 但它是一个数字  NaN === NaN; false; 64 位浮点数 JS 数字的存储形式:</description>
    </item>
    
    <item>
      <title>JS语法</title>
      <link>http://zhixiukang.com/posts/js-grammar/</link>
      <pubDate>Tue, 18 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/js-grammar/</guid>
      <description>JS 语法  参考资料: JavaScript 的基本语法 - JavaScript 教程 - 网道
 JS 版本 历史版本  ES3, IE 6 支持，总体评价: 垃圾 ES5, 总体评价: 还是垃圾 ES6, 大部分浏览器支持,总体评价:一半垃圾一半好 ES2019 与 ES6 差别不大  为什么说 ES6 一半垃圾  因为 ES 不能删除以前的特性，要兼容旧网站 也就是说以前能运行的网站，以后都要能运行 对于 Python3 你就能知道兼容的好处: 稳定   JS 之父对 JS 的早期评价(ES6 前): 它的优秀之处并非原创，它的原创之处并不优秀。
  取其精华，去其糟粕。是我们对待 JS 的态度。
 表达式、语句、标识符 表达式与语句 表达式  1+2 表达式的值为 3 add(1,2)表达式的值为函数的返回值 console.log 表达式的值为函数本身  Q: console.log(3)表达式的值为多少？</description>
    </item>
    
    <item>
      <title>内存图和 JS 世界</title>
      <link>http://zhixiukang.com/posts/memory-map-and-js-world/</link>
      <pubDate>Sat, 15 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/memory-map-and-js-world/</guid>
      <description>JS 小知识:
JavaScript 的历史
Javascript 诞生记
Javascript 的 10 个设计缺陷
 操作系统常识 一切都运行在内存里 开机  操作系统在 C 盘里(macOS 的在根目录下多个目录里) 当你按下开机键，主板通电，开始读取固件 固件就是固定在主板上的存储设备，里面有开机程序 开机程序会将文件里的操作系统加载到内存中运行  操作系统(以 Linux 为例)  首先加载操作系统内核 然后启动初始化进程，编号为 1，每个进程都有编号 启动系统服务: 文件、安全、联网 等待用户登录: 输入密码登录/ssh 登录 登录后，运行 shell，用户就可以和操作系统对话了 bash 是一种 shell，图形化界面可认为是一种 shell  打开浏览器 chrome.exe  你双击 Chrome 图标，就会运行 chrome.exe 文件 开启 Chrome 进程，作为主进程 主进程会开启一些辅助进程，如网络服务、GPU 加速 你每新建一个网页，就有可能会开启一个子进程  浏览器的功能   发起请求，下载 HTML，解析 HTML，下载 CSS，解析 CSS，渲染界面，下载 JS，解析 JS，执行 JS 等</description>
    </item>
    
    <item>
      <title>请求和响应 &amp; Node.js Server</title>
      <link>http://zhixiukang.com/posts/request-response-and-nodejs-server/</link>
      <pubDate>Wed, 12 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/request-response-and-nodejs-server/</guid>
      <description>请求与响应模型  帮你发请求的工具叫做User-Agent
 如何做出一个响应  Node.js 有一个 http 模块可以做到  初始代码
   注意事项  这些代码就是服务器代码，一般放在服务器上 path 是不带查询参数的路径 /x query 是查询参数的对象形式{a:’1’} queryString 是查询参数的字符串形式?a=1 pathWithQuery 是带查询参数的路径，一般不用 request 是请求对象 response 是响应对象  代码逻辑  每次收到请求都会把中间的代码执行一遍 用 if else 判断路径，并返回响应 如果是已知路径，一律返回 200 如果是未知路径，一律返回 404 Content-Type 表示内容的类型/语法 response.write()可以填写返回的内容 response.end()表示响应可以发给用户了   URL 里的后缀没有用, /y.css 不一定是 CSS 内容
  Content-Type 才是决定文件类型的关键
 HTTP 基础概念之请求  请求动词 路径加查询参数 协议名/版本 Host: 域名或 IP Accept: text/html Content-Type: 请求体的格式 回车 请求体(也就是上传内容)  细节  三部分: 请求行、请求头、请求体 请求动词有 GET/POST/PUT/PATCH/DELETE 等   GET 用来获取内容，POST 用来上传内容</description>
    </item>
    
    <item>
      <title>IP、端口、域名、URL</title>
      <link>http://zhixiukang.com/posts/ip-port-domain-url/</link>
      <pubDate>Mon, 10 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/ip-port-domain-url/</guid>
      <description>Tim Berners-Lee 发明了 WWW
WWW = URL + HTTP + HTML
 IP 什么是 IP Internet Protocol 主要约定了两件事:
 如何定位一台设备 如何封装数据报文，以跟其他设备交流  IP 分为内网和外网  Difference between External and Local IP Addresses
 几个特殊的 IP  127.0.0.1 表示自己 localhost 通过 hosts 指定为自己 0.0.0.0 不表示任何设备  hosts 文件在哪？
在 Windows 系统中，hosts 位于 C:\Windows\System32\drivers\etc\hosts 。
在 macOS / Linux 系统中，hosts 位于 /etc/hosts
可以给其他的 ip 起别名，方便访问。
   端口 端口号 一台机器可以提供很多服务，每个服务一个号码，这个号码就叫端口号 port。</description>
    </item>
    
    <item>
      <title>CSS动画中的transition过渡和animation</title>
      <link>http://zhixiukang.com/posts/transition-and-animation/</link>
      <pubDate>Fri, 07 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/transition-and-animation/</guid>
      <description>transition 过渡 完整文档: transition | MDN
作用  补充中间帧  语法:  transition: 属性名 时长 过渡方式 延迟时间 transition: left 200ms linear 可以用逗号分隔两个不同属性 transition: left 200ms, top 400ms 可以用 all 代表所有属性 transition: all 200ms 过渡方式有:  &amp;lt;timing-function&amp;gt; = linear | &amp;lt;cubic-bezier-timing-function&amp;gt; | &amp;lt;step-timing-function&amp;gt; where &amp;lt;cubic-bezier-timing-function&amp;gt; = ease | ease-in | ease-out | ease-in-out | cubic-bezier(&amp;lt;number&amp;gt;, &amp;lt;number&amp;gt;, &amp;lt;number&amp;gt;, &amp;lt;number&amp;gt;) &amp;lt;step-timing-function&amp;gt; = step-start | step-end | steps(&amp;lt;integer&amp;gt;[, &amp;lt;step-position&amp;gt;]?)  的具体含义要靠数学知识
 注意  并不是所有属性都能过渡 display: none=&amp;gt;block没法过渡 一般改成visibility:hidden=&amp;gt;visible background 颜色可以过渡吗？可以。 opacity 透明度可以过渡吗？可以。  过渡必须要有起始。</description>
    </item>
    
    <item>
      <title>CSS动画中的transform</title>
      <link>http://zhixiukang.com/posts/transform/</link>
      <pubDate>Wed, 05 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/transform/</guid>
      <description>完整文档: transform - CSS（层叠样式表） | MDN
四个常用功能  位移 translate 缩放 scale 旋转 rotate 倾斜 skew  经验:
一般都需要配合 transition 过渡
inline 元素不支持 transform,需要先变成 block
   transform 之 translate 常用写法 &amp;lt;translateX()&amp;gt; = translateX( &amp;lt;length-percentage&amp;gt; ) &amp;lt;translateY()&amp;gt; = translateY( &amp;lt;length-percentage&amp;gt; ) &amp;lt;translateZ()&amp;gt; = translateZ( &amp;lt;length&amp;gt; )且父容器perspective &amp;lt;translate()&amp;gt; = translate( &amp;lt;length-percentage&amp;gt; , &amp;lt;length-percentage&amp;gt; ) &amp;lt;translate3d()&amp;gt; = translate3d( &amp;lt;length-percentage&amp;gt; , &amp;lt;length-percentage&amp;gt; , &amp;lt;length&amp;gt; )  示例代码
 经验  要学会看懂 MDN 的语法示例 translate(-50%, -50%)可做绝对定位元素的居中  #demo { left: 50%; right: 50%; transform: translate(-50%, -50%); } transform 之 scale 常用写法 &amp;lt;scaleX()&amp;gt; = scaleX( &amp;lt;number&amp;gt; ) &amp;lt;scaleY()&amp;gt; = scaleY( &amp;lt;number&amp;gt; ) &amp;lt;scale()&amp;gt; = scale( &amp;lt;number&amp;gt; , &amp;lt;number&amp;gt;?</description>
    </item>
    
    <item>
      <title>CSS动画的原理和浏览器渲染原理</title>
      <link>http://zhixiukang.com/posts/browser-rendering/</link>
      <pubDate>Sun, 02 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/browser-rendering/</guid>
      <description>动画的原理 一个最简单的例子 将 div 从左往右移动 点我看例子
原理  每过一段时间(用 setInterval 做到) 将 div 移动一小段距离 直到移动到目标地点  注意性能  绿色表示重新绘制(repaint)了  Console→Rendering→ 勾选 Paint flashing
  CSS 渲染过程依次包含布局、绘制、合成 其中布局和绘制有可能被省略  前端高手不用 left 做动画 用 transform(变形)  示例代码
 原理 - transform: translateX(0=&amp;gt;300px) - 直接修改会被合成，需要等一会修改 - transition过渡属性可以自动脑补中间帧  注意性能  并没有 repaint(重新绘制) 比改 left 性能好  浏览器渲染原理 参考文章  渲染树构建、布局及绘制 渲染性能 使用 transform 来实现动画 查看 CSS 个属性触发什么: CSS Triggers  Q: Blink, Gecko, WebKit, EdgeHTML 是啥？</description>
    </item>
    
    <item>
      <title>CSS定位</title>
      <link>http://zhixiukang.com/posts/css-positioning/</link>
      <pubDate>Fri, 31 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/css-positioning/</guid>
      <description>布局和定位有啥区别?
区别大了，布局是屏幕平面上的，定位是垂直于屏幕的
还得从文档流和盒模型说起
复习一下盒模型
 一个 div 的分层  文字在最上层，border 在第二层，background 在第三层。
  Q: 浮动元素和块级子元素是什么意思呢？
A: 这里有一个例子
  Q: 浮动元素脱离文档流是什么意思?
A: 其实就是浮起来了一点点
 新属性 - position static默认值，待在文档流里 relative相对定位，升起来，但不脱离文档流 .demo { position: relative; top: 10px; left: 10px; }  站的位置一样，但是显示的地方有一定的偏移量。
 使用场景  用于做位移(很少用) 用于给 absolute 元素做爸爸  爸爸用 relative，儿子用 absolute
   配合 z-index  z-index:auto默认值，不创建新层叠上下文 z-index: 0/ 1/ 2 z-index: -1/ -2  默认为z-index: auto;，auto其实等于 0, 但是你不可以写z-index: 0;。</description>
    </item>
    
    <item>
      <title>Grid布局(Grid)</title>
      <link>http://zhixiukang.com/posts/grid-layout/</link>
      <pubDate>Tue, 28 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/grid-layout/</guid>
      <description>完整参考资料:A Complete Guide to Grid | CSS-Tricks
二维布局用 Grid  一维布局用 Flex(要么横着排或者竖着排)
 Grid Container 的属性 成为 container .container { display: grid | inline-grid; } 行和列 .container { grid-template-columns: &amp;lt;track-size&amp;gt; … | &amp;lt;line-name&amp;gt; &amp;lt;track-size&amp;gt; …; grid-template-rows: &amp;lt;track-size&amp;gt; … | &amp;lt;line-name&amp;gt; &amp;lt;track-size&amp;gt; …; } 举个例子:
.container { grid-template-columns: 40px 50px auto 50px 40px; grid-template-rows: 25% 100px auto; }  当我们声明几行几列之后，就会有一个虚的线把它分隔。你可以在任何地方去放一个div。比如你可以在第一个块那里上一个div，你也可以在 1 到 5 那里放一个div。可以通过指定row是从那一条线到哪一条线，column是从哪一条线到哪一条线，非常精准。
 你还可以给每条线取名字(一般不取这么复杂的名字，我们直接用数字就好了):
.container { grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end]; grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line]; } 取名有啥用？利用#item可以设置范围:</description>
    </item>
    
    <item>
      <title>Flex 布局(Flexbox)</title>
      <link>http://zhixiukang.com/posts/flexbox/</link>
      <pubDate>Sat, 25 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/flexbox/</guid>
      <description>完整参考资料: A Complete Guide to Flexbox | CSS-Tricks
容器 container flex container 有哪些样式(属性) 让一个元素变成 flex 容器 .container { display: flex; /* or inline-flex */ }  一个是 flex，一个是行内的 flex
 改变 items 流动方向(主轴) .container { flex-direction: row | row-reverse | column | column-reverse; }  可以通过 flex-direction 控制流动方向。默认是 row(从左到右)。
  控制的方向就叫做主轴，比如说你控制的是从左往右，那么主轴的方向就是从左往右。你控制的是从右往左，那么主轴的方向就是从右往左。你控制的什么方向，主轴就是什么方向。
 改变折行 在我们讲文档流的时候说过，如果你是从左往右排，到了底部你如果空间不够你回折行的对不对。但是如果你不做特殊的判断，这个弹性盒一行有多少空间就给你挤多少空间，他会一直挤下去。那么如何解决这个问题？答案是你可以控制是否要换行。
.container { flex-wrap: nowrap | wrap | wrap-reverse; }  默认是 no wrap(不折行)，wrap(折行)。一般我们都是 wrap 的。wrap-reverse(从下面往上折)。</description>
    </item>
    
    <item>
      <title>Float 布局(Floats)</title>
      <link>http://zhixiukang.com/posts/floats/</link>
      <pubDate>Wed, 22 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/floats/</guid>
      <description>步骤  在子元素上加float:left和width :::在父元素上加.clearfix:::，这个超级重要。  .clearfix:after { content: &amp;#34;&amp;#34;; display: block; clear: both; } 代码在这里
经验  有经验者会留一些空间或者最后一个不设width（最后一个不设宽度，会让它自己拓展，当然了，可以给一个最大宽度。） 如果用 float 布局，不需要做响应式，因为手机上没有 IE，而这个布局是专门为 IE 准备的。 IE6/7 存在双倍 margin bug，解决办法有两个: 1. 将错就错，针对 IE6 或者 IE7 把 margin 减半: margin-left:10px _margin-left:5px 这样一来，普通浏览器就是 10px, 但是 IE 是 5*2=10px 还是 10px。 3. 神来一笔，再加一个display:inline-block  实践 不同布局  用 float 做两栏布局(如顶部条) 用 float 做三栏布局(如内容区) 用 float 做四栏布局(如导航) 点我看看 用 float 做平均布局(如产品展示区) 曾经淘宝的前端发明了双飞翼布局，不要学，已过时  float 实例代码
    有的时候 border 会干扰宽度，这个时候可以把 border 改成 outline。</description>
    </item>
    
    <item>
      <title>CSS布局和一图流</title>
      <link>http://zhixiukang.com/posts/css-layout/</link>
      <pubDate>Mon, 20 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/css-layout/</guid>
      <description>布局是什么 把页面分成一块一块，按左中右、上中下等排列。
布局分类 两种  固定宽度布局，一般宽度为 960/1000/1024px  比如淘宝就是固定宽度布局，到了一定宽度你再怎么拉，他还是这个宽度。
  不固定宽度布局，主要靠文档流的原理来布局  一般在手机上用
   还记得吗  文档流本来就是自适应的，不需要加额外的样式  不用加width这种属性，页面本身就是响应式的。
   第三种布局  响应式布局 意思就是 PC 上固定宽度，手机上不固定宽度  其实就是前两种布局的合并，但为什么叫第三种布局，起了个新名字？CSS 就这个毛病。
  也就是一种混合布局  布局的两种思路 从大到小  先定下大局 然后完善每个部分的小布局  从小到大  先完成小布局 然后组合成大布局  两种均可  新人推荐用第二种，因为小的简单 老手一般用第一种，因为熟练有大局观  一图流  为什么 grid 布局不用负 margin？ 因为 grid 布局可以通过grid-gap来解决间隙问题。
  草图软件工具推荐
Balsamiq for Desktop | Balsamiq</description>
    </item>
    
    <item>
      <title>盒模型</title>
      <link>http://zhixiukang.com/posts/box-model/</link>
      <pubDate>Fri, 17 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/box-model/</guid>
      <description>概念 盒模型有四个概念，从外到内分别是外边距(margin)、border、内边距(padding)和 content。如果是 content box，那么只包含最里面的 content。如果是 border box，那么只包含 content、padding 和 border(如果是 border box，那么除了 margin 都包含)。
 请说一下 css 的盒模型?  css 盒模型分两种，一种是 content-box,一种是 border-box，content-box 的宽度只包含 content，border-box 的宽度包含到 border(border, padding and content)。
   两种盒模型 分别是  content-box 内容盒-内容就是盒子的边界。 border-box 边框盒-边框才是盒子的边界。  公式  content-box width = 内容宽度 border-box width = 内容宽度 + padding + border  哪个好用  border-box好用 同时指定padding、width、border就知道为什么了 如果没有指定padding和border，看不出来这俩的区别。  margin合并 哪些情况会合并  父子 margin 合并 上面边距有可能重叠。 兄弟 margin 合并 其实 css 这么设计是有道理的:   如何阻止合并  父子合并用 padding/border 挡住  padding-top: 1px; border-top: 1px solid green;  父子合并用 overflow:hidden 挡住 父子合并用 display:flex，不知道为什么 兄弟合并是符合预期的 兄弟合并可以用 inline-block 消除 总之要一条一条死记 而且 CSS 的属性逐年增多，每年都有可能有新的  基本单位 长度单位  px 像素 em 相对于自身 font-size 的倍数 百分数 整数 rem:等你把 em 滚瓜烂熟了再问 rem vw 和 vh 其他长度单位都用得很少，不用了解  颜色  十六进制#FF6600或者#F60(两个两个一对的可以缩写) RGBA 颜色 rgb(0,0,0)或者 rgba(0,0,0,1) hsl 颜色 hsl(360,100%,100%) (0 度正红色-360, 鲜艳程度, 亮度)  做个彩虹练习一下 点我后自己试试吧</description>
    </item>
    
    <item>
      <title>文档流</title>
      <link>http://zhixiukang.com/posts/normal-flow/</link>
      <pubDate>Wed, 15 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/normal-flow/</guid>
      <description>基本概念 文档流是指文档中元素流动的方向。
哪些是 inline 元素，哪些是 block 元素
文档流 | MDN
要理解几个重要的概念  文档流 Normal Flow span元素从左到右， div元素从上到下。 块、内联、内联块 margin 合并 两种盒模型(border-box 更符合人类思维)  inline 元素里不要写 block 元素。不知道会遇到什么 bug。
style width:100%就不要这么用。
   流动方向  inline元素从左到右，到达最右边才会换行 block元素从上到下，每一个都另起一行 inline-block也是从左到右,但是到达最后的时候，不会把自己分成两块。  宽度  inline宽度为内部inline元素的和，不能用width指定 block默认自动计算宽度，可用width指定 inline-block结合前两者特点，可用width  高度  inline高度由line-height间接确定，跟height无关 block高度由内部文档流元素决定，可以设height inline-block跟block类似，可以设置height  overflow 溢出 当内容大于容器  当内容的宽度或高度大于容器的，会溢出 可用overflow来设置是否显示滚动条 auto是灵活设置(常用) scroll是永远显示 hidden是直接隐藏溢出部分(常用) visible是直接显示溢出部分(常用) overflow可以分为overflow-x和overflow-y(不好用)  脱离文档流 回忆一下  block 高度由内部文档流元素决定，可以设 height。  这句话的意思是说，有些元素可以不在文档流中。</description>
    </item>
    
    <item>
      <title>HTML重难点</title>
      <link>http://zhixiukang.com/posts/html-key-parts/</link>
      <pubDate>Sat, 11 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/html-key-parts/</guid>
      <description>a 标签 属性  href hyper reference.  新建终端，执行：
yarn global add http-server
在本地运行，不保留缓存：
http-server -c-1或者
http-server . -c-1
使用http-server预览html,不要双击打开。
可以使用hs -c-1缩写版本，快一点。
    还可以使用parcel：
yarn global add parcel
parcel #filename.suffix
  target  &amp;lt;!— 可以指定在哪个地方打开超链接 (在空白页打开)—&amp;gt; &amp;lt;a href=“https://google.com” target=“_blank”&amp;gt;hyper link&amp;lt;/a&amp;gt;  download  &amp;lt;!--下载这个网页，基本不能用—&amp;gt; &amp;lt;a href=“https://google.com” download&amp;gt;hyper link&amp;lt;/a&amp;gt;  rel=noopener 防止一个 js 的 bug。  作用  跳转外部页面 跳转内部锚点 跳转到邮箱或电话等  a的href的取值  网址  https://google.com http://google.</description>
    </item>
    
    <item>
      <title>HTML标签</title>
      <link>http://zhixiukang.com/posts/html-labels/</link>
      <pubDate>Wed, 08 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/html-labels/</guid>
      <description>学习工具 网道 HTML 教程
 三上:马上，枕上，厕上
 VSCode 插件推荐  Prettier 更好地格式化工具 cmd+shift+p-&amp;gt; format doc  两个工具  jsbin 饥人谷 偏好 JShint 关闭 codesandbox settings: auto save  可以将需要纠错的 URL 分享给别人
   HTML 起手式&amp;ndash;Emmet 感叹号 在空的 html 文件中，输入!+tab。
&amp;lt;!— 文档类型 --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!— html标签，可以把lang改成zh-CN —&amp;gt; &amp;lt;html lang=&amp;#34;“en”&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!— 文件的字符编码 —&amp;gt; &amp;lt;meta charset=&amp;#34;“UTF-8”&amp;#34; /&amp;gt; &amp;lt;!— 禁用缩放 —&amp;gt; &amp;lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0” /&amp;gt; &amp;lt;!— 兼容手机，告诉IE使用最新内核 —&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34; /&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>购买域名及配置DNS和GitHub Pages</title>
      <link>http://zhixiukang.com/posts/how-to-buy-domain/</link>
      <pubDate>Sun, 05 Jan 2020 18:56:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/how-to-buy-domain/</guid>
      <description>购买域名 进入NameSilo，输入自己想要的域名并购买。
配置 DNS 和 GitHub Pages 购买后，进入右上角Manage My Domains查看自己的域名。 点击 manage DNS(小地球)
 打开 github，进入#username.github.io这个项目，进入Settings，拉到最下面, Custom Demain 填入自己的域名并 save。 这个时候回到自己的仓库，发现多了一个CNAME的文件。这个CNAME文件实际上是记录了你刚才填的域名。 回到Settings，将&#39;Enforce HTTPS&#39;取消勾选。原因：方便测试。如果你勾选了 HTTPS，那么和这个网站相关的所有网站你都要用 HTTPS，非常的不方便。建议新手不要勾选。 点击下图中的Learn more。 并进入Managing a custom domain for your GitHub Pages Site. 找到Configuring an apex domain里的4 A records。 // 这里注意每个人的ip都不一样，根据自己显示的ip来操作 18X.XXX.XXX.15X 18X.XXX.XXX.15X 18X.XXX.XXX.15X 18X.XXX.XXX.15X 回到namesilo.com中的Manage DNS页面, Add A record, 这 4 条 A record 根据上面的4 A records来填写，hostname不填, IPV4 ADDRESS为上图中的IP, TTL不用更改。 上述过程依次完成后，Mac 用户通过:  dig noall answer #userdomain.</description>
    </item>
    
    <item>
      <title>用Hugo搭建个人博客</title>
      <link>http://zhixiukang.com/posts/how-to-install-hugo/</link>
      <pubDate>Thu, 02 Jan 2020 18:56:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/how-to-install-hugo/</guid>
      <description>安装Hugo 官方教程 Hugo官方教程
Mac安装方式 brew install hugo hugo version  快速搭建博客 使用Hugo搭建博客 按照Quick Start | Hugo操作。
注意:
 当新建站点时，可以自定义参数，举个例子:  当写完每篇.md后， 可以将draft:true改为draft:false以达到发布的目的。  把 Hugo 生成的博客托管在 GitHub Pages 教程讲完了，现在问题是怎么把public这个目录挂到网上。
步骤如下:
 新建.gitignore,添加/public/ 进入public，git init,git add .,git commit -v素质三连。现在需要做的就是上传了。 怎么上传呢？需要做的就是在github上新建一个仓库。仓库名为#用户名(全部小写).github.io 然后在本地public目录下: 目标就是把public上传到单独的一个仓库。 之后git open来到我们的GitHub仓库。 接下来, 点击项目里右上角的Settings，走到最下面,  选到master。当然如果你和我一样就不用做多余操作了。
点击博客地址。当当当当，done~！  问题：   如何持续更新博客?
每次写完新的博客， 进入public目录, git add .,git commit -v,git push素质三连。
  如果不想要这个皮肤怎么办？
Complete List | Hugo Themes 你想来什么主题就来什么主题。</description>
    </item>
    
  </channel>
</rss>