<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 修的个人网站</title>
    <link>https://zhixiukang.com/tags/javascript/</link>
    <description>Recent content in JavaScript on 修的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 09 Mar 2020 15:21:33 -0800</lastBuildDate>
    
	<atom:link href="https://zhixiukang.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jQuery 中的设计模式和思想</title>
      <link>https://zhixiukang.com/posts/design-patterns-in-jquery/</link>
      <pubDate>Mon, 09 Mar 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/design-patterns-in-jquery/</guid>
      <description>参考资料:
jQuery 都过时了，那我还学它干嘛? - 方应杭
jQuery 设计思想 - 阮一峰的网络日志
jQuery Fundamentals - Bocoup
 特殊函数 jQuery window.jQuery(); // 提供的全局函数   jQuery(选择器)用来获取对应的元素 但它却不返回这些元素 相反，它返回一个 jQuery 构造出来的对象 这个对象可以操作对应的元素   jQuery 是构造函数吗?
是: 因为 jQuery 函数确实构造出了一个对象.
不是: 因为不需要new jQuery()就能构造一个对象.
结论: jQuery 是一个不需要加 new 的构造函数
  嫌 jQuery 太长？
还记得 bash alias 吗，添加一个别名即可: window.$ = window.jQuery
 命名风格  下面的代码令人误解:  const div = $(‘div#test&#39;)   我们会误以为 div 是一个 DOM，实际上 div 是 jQuery 构造的 api 对象，怎么避免这种误解呢？</description>
    </item>
    
    <item>
      <title>DOM编程和操作跨线程</title>
      <link>https://zhixiukang.com/posts/dom-programming/</link>
      <pubDate>Sat, 07 Mar 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/dom-programming/</guid>
      <description>获取任意元素 有很多 API window.idxxx; // 或者直接idxxx document.getElementById(&amp;quot;idxxx&amp;quot;); document.getElementsByTagName(&amp;quot;div&amp;quot;)[0]; document.getElementsByClassName(&amp;quot;red&amp;quot;)[0]; document.querySelector(&amp;quot;#idxxx&amp;quot;); // 记得加# document.querySelectorAll(&amp;quot;.red&amp;quot;)[0];  用哪一个  工作中用querySelector和querySelectorAll
例子:document.querySelectorAll(&#39;div&amp;gt;span:nth-child(2)&#39;)
  做 demo 直接用idxxx，千万别让人发现 hhh
  要兼容 IE 的可怜虫才用getElement(s)ByXXX
 获取特定元素 获取 html 元素 document.documentElement;  获取 head 元素 document.head;  获取 body 元素 document.body;  获取窗口  窗口不是元素
 window;  获取所有元素 document.all; // false   这个 document.all 是个奇葩，第 6 个 falsy 值。原因是过去用来判断是否是 IE 浏览器。
 元素的 6 层原型链 抓一只 div 对象来看看 console.</description>
    </item>
    
    <item>
      <title>JS总结</title>
      <link>https://zhixiukang.com/posts/js-conclusion/</link>
      <pubDate>Thu, 05 Mar 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/js-conclusion/</guid>
      <description>知识点 基本概念 内存、变量、数据类型、对象
控制语句  if…else&amp;hellip; for…  对象  原型、原型链 对象分类 new一个新对象 构造函数 this的隐式传递和显式传递  难点  JS三座大山
  原型 this AJAX  最重要的知识 JS公式 对象.__proto__===其构造函数.prototype   JS唯一公式，如果不会就套公式
 根公理 Object.prototype是所有对象的(直接或间接)原型   加了一个直接或间接，所谓公理就是规定好的
 函数公理 所有函数都是由Function构造的   任何函数.__proto__===Function.prototype
任意函数有Object/Array/Function
 拨乱反正 乱一 XXX的原型  {name:&#39;frank&#39;}的原型   Object.prototype
  [1, 2, 3]的原型   Array.prototype
  Object的原型   Function.prototype
 解读  Object的原型是Object.</description>
    </item>
    
    <item>
      <title>面试中的JS运算符</title>
      <link>https://zhixiukang.com/posts/js-operators/</link>
      <pubDate>Tue, 03 Mar 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/js-operators/</guid>
      <description>算数运算符  ＋－* / 余数%  //JS的错误 -1%7 //-1 而不是 6   指数 x**3 自增自减  x++ //这个表达式的值为x，最后返回x+1 ++x //这个表达式的值为x+1，最后返回x+1 x-- //这个表达式的值为x，最后返回x-1 --x //这个表达式的值为x-1，最后返回x-1   尽量少用自增自减
  求值运算符  // 可以将任何值转为数值（与Number函数的作用相同） +(-1)// -1 +true // 1 +[] // 0 +{} // NaN   负数运算符  // 同样具有将一个值转为数值的功能，只不过得到的值正负相反 -(-1) // 1 -true // -1 -[] // -0 -{} // NaN   JS的一个糟粕  1 + &#39;2&#39; //&amp;quot;12&amp;quot; 2 - &#39;1&#39; // 1 // +号运算符默认把所有运算子变成字符串然后运算 // -号运算符默认把所有运算子变成数值然后运算  比较运算符  JS三位一体  意思是:</description>
    </item>
    
    <item>
      <title>JS函数和你不知道的this</title>
      <link>https://zhixiukang.com/posts/js-funtion-and-this/</link>
      <pubDate>Sun, 01 Mar 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/js-funtion-and-this/</guid>
      <description>四种方式定义函数 具名函数 function 函数名(形式参数1, 形式参数2) { 语句 return 返回值 }  匿名函数  上面的具名函数，去掉函数名就是匿名函数 let a = function(x, y) {return x+y} 也叫函数表达式  箭头函数 let f1 = x =&amp;gt; x*x let f2 = (x, y) =&amp;gt; x+y // 圆括号不能省 let f3 = (x, y) =&amp;gt; {return x+y} //花括号不能省 let f4 = (x, y) =&amp;gt; ({name:x, age: y})   直接返回对象会出错，需要加个圆括号
 构造函数  let f = new Function(‘x’, ‘y’, ‘return x+y’) 所有函数都是Function构造出来的 包括Object、Array、Function也是   基本没人用，但是能让你知道函数是谁构造的</description>
    </item>
    
    <item>
      <title>JS数组的增删改查和数组变换</title>
      <link>https://zhixiukang.com/posts/js-array/</link>
      <pubDate>Thu, 27 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/js-array/</guid>
      <description>JS 的数组不是典型数组 典型的数组  元素的数据类型相同 使用连续的内存存储 通过数字下标获取元素  但 JS 的数组不这样  元素的数据类型可以不同 内存不一定是连续的(对象是随机存储的) 不能通过数字下标，而是通过字符串下标 这意味着数组可以有任何 key  let arr = [1, 2, 3] arr[‘xxx&#39;] = 1  创建一个数组 新建 let arr = [1, 2, 3]; let arr = new Array(1, 2, 3); let arr = new Array(3);  转化 let arr = &#39;1, 2, 3&#39;.split(‘,’) let arr = &#39;123&#39;.split(‘’) Array.from(&#39;123&#39;)  伪数组 let divList = document.querySelector(‘div’) let divArray = Array.</description>
    </item>
    
    <item>
      <title>JS对象分类、原型和共用属性的关系、对象的ES6写法</title>
      <link>https://zhixiukang.com/posts/js-object-and-prototype-with-public-attributes/</link>
      <pubDate>Tue, 25 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/js-object-and-prototype-with-public-attributes/</guid>
      <description>延伸阅读
你可以不会 class，但是一定要学会 prototype
JS 的 new 到底是干什么的？
JS 中 proto 和 prototype 存在的意义是什么？
ES6 所有新特性
 构造函数 函数和原型结合 function createSquare(width) { let obj = Object.create(createSquare.squarePrototype) obj.width = width return obj } createSquare.squarePrototype = { getArea() { return this.width * this.width	}, getLength() { return this.width * 4 }, constructor: createSquare } let square = createSquare(5)  简化为：
function Square(width) { this.width = width } Square.prototype.getArea = function() { return this.</description>
    </item>
    
    <item>
      <title>JS对象的增删改查</title>
      <link>https://zhixiukang.com/posts/create-retrieve-update-delete-of-js-object/</link>
      <pubDate>Sun, 23 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/create-retrieve-update-delete-of-js-object/</guid>
      <description>七种数据类型？
number string bool symbol
null undefined
object
  五个 falsy 值？
null undefined
0 NaN
‘’
 对象的语法 定义  无序的数据集合 键值对的集合  写法 let obj = {&#39;name&#39;: &#39;frank’, ‘age’: 18} let obj = new Object({‘name’: ‘frank’}) console.log({&#39;name&#39;: ‘frank’, ‘age’: 18})  细节  键名是字符串，不是标识符，可以包含任意字符 引号可省略，省略之后就只能写标识符 就算引号省略了，键名也还是字符串  Object.keys(object)可以得到 object 的所有 key
   变量作属性名 如何用变量做属性名 let p1 = &#39;name&#39; // 这样写，属性名为&#39;p1&#39; let obj = {p1: &#39;frank’} // 这样写，属性名为&#39;name&#39; let obj = {[p1]: &#39;frank’}  对比  不加[]的属性名会自动变成字符串 加了[]的则会被当做变量求值 值如果不是字符串，则会自动变成字符串  对象的隐藏属性  JS 中每一个对象都有一个隐藏属性 这个隐藏属性存储着其共有属性组成的对象的地址 这个公有属性组成的对象叫做原型 也就是说，隐藏属性储存着原型的地址  var obj = {}; obj.</description>
    </item>
    
    <item>
      <title>字符编码、JS数据类型、变量声明、类型转换</title>
      <link>https://zhixiukang.com/posts/encoding-js-data-type-variable-declaration-typecasting/</link>
      <pubDate>Thu, 20 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/encoding-js-data-type-variable-declaration-typecasting/</guid>
      <description>推荐阅读: 我用了两个月的时间才理解 let - 知乎
  字符编码笔记：ASCII，Unicode 和 UTF-8 - 阮一峰的网络日志
 JS 中的数据类型 7 种  数字 number 字符串 string 布尔 bool 符号 symbol 空 undefined 空 null 对象 object  总结: 四基两空一对象
   以下不是数据类型  数组、函数、日期 它们都属于 object  数字 number(64 位浮点数) 写法  整数写法: 1 小数写法: 0.1 科学计数法: 1.23e4 八进制写法: 0123 或 00123 或 0o123 十六进制写法: 0x3F 或 0X3F 二进制写法: 0b11 或 0B11  特殊值  正 0 和负 0: 都等于 0，要严谨 无穷大: Infinity、+Infinity、-Infinity 无法表示的数字: NaN(Not a Number), 但它是一个数字  NaN === NaN; false;  64 位浮点数 JS 数字的存储形式:</description>
    </item>
    
    <item>
      <title>JS语法</title>
      <link>https://zhixiukang.com/posts/js-grammar/</link>
      <pubDate>Tue, 18 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/js-grammar/</guid>
      <description>JS 语法  参考资料: JavaScript 的基本语法 - JavaScript 教程 - 网道
 JS 版本 历史版本  ES3, IE 6 支持，总体评价: 垃圾 ES5, 总体评价: 还是垃圾 ES6, 大部分浏览器支持,总体评价:一半垃圾一半好 ES2019 与 ES6 差别不大  为什么说 ES6 一半垃圾  因为 ES 不能删除以前的特性，要兼容旧网站 也就是说以前能运行的网站，以后都要能运行 对于 Python3 你就能知道兼容的好处: 稳定   JS 之父对 JS 的早期评价(ES6 前): 它的优秀之处并非原创，它的原创之处并不优秀。
  取其精华，去其糟粕。是我们对待 JS 的态度。
 表达式、语句、标识符 表达式与语句 表达式  1+2 表达式的值为 3 add(1,2)表达式的值为函数的返回值 console.log 表达式的值为函数本身  Q: console.log(3)表达式的值为多少？</description>
    </item>
    
    <item>
      <title>内存图和 JS 世界</title>
      <link>https://zhixiukang.com/posts/memory-map-and-js-world/</link>
      <pubDate>Sat, 15 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>https://zhixiukang.com/posts/memory-map-and-js-world/</guid>
      <description>JS 小知识:
JavaScript 的历史
Javascript 诞生记
Javascript 的 10 个设计缺陷
 操作系统常识 一切都运行在内存里 开机  操作系统在 C 盘里(macOS 的在根目录下多个目录里) 当你按下开机键，主板通电，开始读取固件 固件就是固定在主板上的存储设备，里面有开机程序 开机程序会将文件里的操作系统加载到内存中运行  操作系统(以 Linux 为例)  首先加载操作系统内核 然后启动初始化进程，编号为 1，每个进程都有编号 启动系统服务: 文件、安全、联网 等待用户登录: 输入密码登录/ssh 登录 登录后，运行 shell，用户就可以和操作系统对话了 bash 是一种 shell，图形化界面可认为是一种 shell  打开浏览器 chrome.exe  你双击 Chrome 图标，就会运行 chrome.exe 文件 开启 Chrome 进程，作为主进程 主进程会开启一些辅助进程，如网络服务、GPU 加速 你每新建一个网页，就有可能会开启一个子进程  浏览器的功能   发起请求，下载 HTML，解析 HTML，下载 CSS，解析 CSS，渲染界面，下载 JS，解析 JS，执行 JS 等</description>
    </item>
    
  </channel>
</rss>