<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前后分离 on 修的个人网站</title>
    <link>http://zhixiukang.com/tags/%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/</link>
    <description>Recent content in 前后分离 on 修的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Mar 2020 15:21:33 -0800</lastBuildDate>
    
	<atom:link href="http://zhixiukang.com/tags/%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AJAX的原理和加载JSON</title>
      <link>http://zhixiukang.com/posts/ajax-principles-and-load-json-with-ajax/</link>
      <pubDate>Wed, 11 Mar 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/ajax-principles-and-load-json-with-ajax/</guid>
      <description>AJAX(Async JavaScript And XML) → 用JS发请求和收响应
 让我们通过使用AJAX来加载CSS、JavaScript、HTML、XML和JSON，学会AJAX的原理和用法。
 示例代码
 背景 AJAX是浏览器上的功能  浏览器可以发请求，收响应 浏览器在window上加了一个XMLHttpRequest函数 用这个构造函数(类)可以构造出一个对象 JS通过它实现发请求，收响应   小工具:node-dev
 准备一个服务器  使用server.js作为我们的服务器 用node server.js 8888启动 添加index.html/main.js两个路由:  if (path === &amp;#34;/index.html&amp;#34;) { response.statusCode = 200; response.setHeader(&amp;#34;Content-Type&amp;#34;, &amp;#34;text/html;charset=utf-8&amp;#34;); response.write(`&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;ajax&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;AJAX demo&amp;lt;/h1&amp;gt; &amp;lt;script src=&amp;#34;/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; `); response.end(); } else if (path === &amp;#34;/main.js&amp;#34;) { response.statusCode = 200; response.setHeader(&amp;#34;Content-Type&amp;#34;, &amp;#34;text/css;charset=utf-8&amp;#34;); response.write(`console.log(&amp;#34;I am main.js&amp;#34;)`); response.end(); } 挑战1-加载CSS  以前我们用&amp;lt;link rel=stylesheet href=&amp;quot;1.</description>
    </item>
    
  </channel>
</rss>