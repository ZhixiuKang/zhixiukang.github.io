<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS on 修的个人网站</title>
    <link>http://zhixiukang.com/tags/css/</link>
    <description>Recent content in CSS on 修的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 01 Feb 2020 15:21:33 -0800</lastBuildDate>
    
	<atom:link href="http://zhixiukang.com/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS定位</title>
      <link>http://zhixiukang.com/posts/css-positioning/</link>
      <pubDate>Sat, 01 Feb 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/css-positioning/</guid>
      <description>布局和定位有啥区别?
区别大了，布局是屏幕平面上的，定位是垂直于屏幕的
还得从文档流和盒模型说起
复习一下盒模型
 一个div的分层  文字在最上层，border在第二层，background在第三层。
  Q: 浮动元素和块级子元素是什么意思呢？
A: 这里有一个例子
  Q: 浮动元素脱离文档流是什么意思?
A: 其实就是浮起来了一点点
 新属性 - position static默认值，待在文档流里 relative相对定位，升起来，但不脱离文档流 .demo { position: relative; top: 10px; left: 10px; }  站的位置一样，但是显示的地方有一定的偏移量。
 使用场景  用于做位移(很少用) 用于给absolute元素做爸爸   爸爸用relative，儿子用absolute
 配合z-index  z-index:auto默认值，不创建新层叠上下文 z-index: 0/ 1/ 2 z-index: -1/ -2   默认为z-index: auto;，auto其实等于0, 但是你不可以写z-index: 0;。
 经验  写z-index: 9999的都是菜🐔 学会管理z-index  absolute绝对定位，定位基准是祖先里的非static .</description>
    </item>
    
    <item>
      <title>Grid布局(Grid)</title>
      <link>http://zhixiukang.com/posts/grid-layout/</link>
      <pubDate>Fri, 31 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/grid-layout/</guid>
      <description>完整参考资料:A Complete Guide to Grid | CSS-Tricks
二维布局用 Grid  一维布局用 Flex(要么横着排或者竖着排)
 Grid Container 的属性 成为 container .container { display: grid | inline-grid; } 行和列 .container { grid-template-columns: &amp;lt;track-size&amp;gt; … | &amp;lt;line-name&amp;gt; &amp;lt;track-size&amp;gt; …; grid-template-rows: &amp;lt;track-size&amp;gt; … | &amp;lt;line-name&amp;gt; &amp;lt;track-size&amp;gt; …; } 举个例子:
.container { grid-template-columns: 40px 50px auto 50px 40px; grid-template-rows: 25% 100px auto; }  当我们声明几行几列之后，就会有一个虚的线把它分隔。你可以在任何地方去放一个div。比如你可以在第一个块那里上一个div，你也可以在 1 到 5 那里放一个div。可以通过指定row是从那一条线到哪一条线，column是从哪一条线到哪一条线，非常精准。
 你还可以给每条线取名字(一般不取这么复杂的名字，我们直接用数字就好了):
.container { grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end]; grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line]; } 取名有啥用？利用#item可以设置范围:</description>
    </item>
    
    <item>
      <title>Flex 布局(Flexbox)</title>
      <link>http://zhixiukang.com/posts/flexbox/</link>
      <pubDate>Thu, 30 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/flexbox/</guid>
      <description>完整参考资料: A Complete Guide to Flexbox | CSS-Tricks
容器 container flex container 有哪些样式(属性) 让一个元素变成 flex 容器 .container { display: flex; /* or inline-flex */ }  一个是 flex，一个是行内的 flex
 改变 items 流动方向(主轴) .container { flex-direction: row | row-reverse | column | column-reverse; }  可以通过 flex-direction 控制流动方向。默认是 row(从左到右)。
  控制的方向就叫做主轴，比如说你控制的是从左往右，那么主轴的方向就是从左往右。你控制的是从右往左，那么主轴的方向就是从右往左。你控制的什么方向，主轴就是什么方向。
 改变折行 在我们讲文档流的时候说过，如果你是从左往右排，到了底部你如果空间不够你回折行的对不对。但是如果你不做特殊的判断，这个弹性盒一行有多少空间就给你挤多少空间，他会一直挤下去。那么如何解决这个问题？答案是你可以控制是否要换行。
.container { flex-wrap: nowrap | wrap | wrap-reverse; }  默认是 no wrap(不折行)，wrap(折行)。一般我们都是 wrap 的。wrap-reverse(从下面往上折)。</description>
    </item>
    
    <item>
      <title>Float 布局(Floats)</title>
      <link>http://zhixiukang.com/posts/floats/</link>
      <pubDate>Wed, 29 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/floats/</guid>
      <description>步骤  在子元素上加float:left和width :::在父元素上加.clearfix:::，这个超级重要。  .clearfix:after { content: &amp;#34;&amp;#34;; display: block; clear: both; } 代码在这里
经验  有经验者会留一些空间或者最后一个不设width（最后一个不设宽度，会让它自己拓展，当然了，可以给一个最大宽度。） 如果用 float 布局，不需要做响应式，因为手机上没有 IE，而这个布局是专门为 IE 准备的。 IE6/7 存在双倍 margin bug，解决办法有两个: 1. 将错就错，针对 IE6 或者 IE7 把 margin 减半: margin-left:10px _margin-left:5px 这样一来，普通浏览器就是 10px, 但是 IE 是 5*2=10px 还是 10px。 3. 神来一笔，再加一个display:inline-block  实践 不同布局  用 float 做两栏布局(如顶部条) 用 float 做三栏布局(如内容区) 用 float 做四栏布局(如导航) 点我看看 用 float 做平均布局(如产品展示区) 曾经淘宝的前端发明了双飞翼布局，不要学，已过时  float 实例代码
    有的时候 border 会干扰宽度，这个时候可以把 border 改成 outline。</description>
    </item>
    
    <item>
      <title>CSS布局和一图流</title>
      <link>http://zhixiukang.com/posts/css-layout/</link>
      <pubDate>Tue, 28 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/css-layout/</guid>
      <description>布局是什么 把页面分成一块一块，按左中右、上中下等排列。
布局分类 两种  固定宽度布局，一般宽度为 960/1000/1024px  比如淘宝就是固定宽度布局，到了一定宽度你再怎么拉，他还是这个宽度。
  不固定宽度布局，主要靠文档流的原理来布局  一般在手机上用
   还记得吗  文档流本来就是自适应的，不需要加额外的样式  不用加width这种属性，页面本身就是响应式的。
   第三种布局  响应式布局 意思就是 PC 上固定宽度，手机上不固定宽度  其实就是前两种布局的合并，但为什么叫第三种布局，起了个新名字？CSS 就这个毛病。
  也就是一种混合布局  布局的两种思路 从大到小  先定下大局 然后完善每个部分的小布局  从小到大  先完成小布局 然后组合成大布局  两种均可  新人推荐用第二种，因为小的简单 老手一般用第一种，因为熟练有大局观  一图流  为什么 grid 布局不用负 margin？ 因为 grid 布局可以通过grid-gap来解决间隙问题。
  草图软件工具推荐
Balsamiq for Desktop | Balsamiq</description>
    </item>
    
    <item>
      <title>盒模型</title>
      <link>http://zhixiukang.com/posts/box-model/</link>
      <pubDate>Mon, 27 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/box-model/</guid>
      <description>概念 盒模型有四个概念，从外到内分别是外边距(margin)、border、内边距(padding)和 content。如果是 content box，那么只包含最里面的 content。如果是 border box，那么只包含 content、padding 和 border(如果是 border box，那么除了 margin 都包含)。
 请说一下 css 的盒模型?  css 盒模型分两种，一种是 content-box,一种是 border-box，content-box 的宽度只包含 content，border-box 的宽度包含到 border(border, padding and content)。
   两种盒模型 分别是  content-box 内容盒-内容就是盒子的边界。 border-box 边框盒-边框才是盒子的边界。  公式  content-box width = 内容宽度 border-box width = 内容宽度 + padding + border  哪个好用  border-box好用 同时指定padding、width、border就知道为什么了 如果没有指定padding和border，看不出来这俩的区别。  margin合并 哪些情况会合并  父子 margin 合并 上面边距有可能重叠。 兄弟 margin 合并 其实 css 这么设计是有道理的:   如何阻止合并  父子合并用 padding/border 挡住  padding-top: 1px; border-top: 1px solid green;  父子合并用 overflow:hidden 挡住 父子合并用 display:flex，不知道为什么 兄弟合并是符合预期的 兄弟合并可以用 inline-block 消除 总之要一条一条死记 而且 CSS 的属性逐年增多，每年都有可能有新的  基本单位 长度单位  px 像素 em 相对于自身 font-size 的倍数 百分数 整数 rem:等你把 em 滚瓜烂熟了再问 rem vw 和 vh 其他长度单位都用得很少，不用了解  颜色  十六进制#FF6600或者#F60(两个两个一对的可以缩写) RGBA 颜色 rgb(0,0,0)或者 rgba(0,0,0,1) hsl 颜色 hsl(360,100%,100%) (0 度正红色-360, 鲜艳程度, 亮度)  做个彩虹练习一下 点我后自己试试吧</description>
    </item>
    
    <item>
      <title>文档流</title>
      <link>http://zhixiukang.com/posts/normal-flow/</link>
      <pubDate>Sun, 26 Jan 2020 15:21:33 -0800</pubDate>
      
      <guid>http://zhixiukang.com/posts/normal-flow/</guid>
      <description>基本概念 文档流是指文档中元素流动的方向。
哪些是 inline 元素，哪些是 block 元素
文档流 | MDN
要理解几个重要的概念  文档流 Normal Flow span元素从左到右， div元素从上到下。 块、内联、内联块 margin 合并 两种盒模型(border-box 更符合人类思维)  inline 元素里不要写 block 元素。不知道会遇到什么 bug。
style width:100%就不要这么用。
   流动方向  inline元素从左到右，到达最右边才会换行 block元素从上到下，每一个都另起一行 inline-block也是从左到右,但是到达最后的时候，不会把自己分成两块。  宽度  inline宽度为内部inline元素的和，不能用width指定 block默认自动计算宽度，可用width指定 inline-block结合前两者特点，可用width  高度  inline高度由line-height间接确定，跟height无关 block高度由内部文档流元素决定，可以设height inline-block跟block类似，可以设置height  overflow 溢出 当内容大于容器  当内容的宽度或高度大于容器的，会溢出 可用overflow来设置是否显示滚动条 auto是灵活设置(常用) scroll是永远显示 hidden是直接隐藏溢出部分(常用) visible是直接显示溢出部分(常用) overflow可以分为overflow-x和overflow-y(不好用)  脱离文档流 回忆一下  block 高度由内部文档流元素决定，可以设 height。  这句话的意思是说，有些元素可以不在文档流中。</description>
    </item>
    
  </channel>
</rss>